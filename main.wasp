app book_planner {
  wasp: {
    version: "^0.11.6"
  },
  title: "book_planner",
  head: [
        "<meta property='og:type' content='website' />",
        "<meta property='og:url' content='https://mySaaSapp.com' />",
        "<meta property='og:description' content='I made a SaaS App. Buy my stuff.' />",
        "<meta property='og:image' content='src/client/static/image.png' />",
        // you can put your google analytics script here, too!
  ],
  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      email: {
        fromField: {
          name: "SaaS App",
          // make sure this address is the same you registered your SendGrid or MailGun account with!
          email: "vince@wasp-lang.dev" 
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@server/auth/email.js",
        },
      },
      // google: { // Guide for setting up Auth via Google https://wasp-lang.dev/docs/auth/social-auth/overview
      //   getUserFieldsFn: import { getUserFields } from "@server/auth/google.js",
      //   configFn: import { config } from "@server/auth/google.js",
      // },
    },
    onAuthFailedRedirectTo: "/",
  },
  db: { 
    system: PostgreSQL,
    seeds: [
      import { devSeedSimple } from "@server/dbSeeds.js",
      import { devSeedBooks } from "@server/dbSeeds.js",
      import { devSeedResources } from "@server/dbSeeds.js",
    ]
  },
  client: {
    rootComponent: import App from "@client/App",
  },
  emailSender: {
    provider: SendGrid,
    defaultFrom: {
      name: "SaaS App",
      // make sure this address is the same you registered your SendGrid or MailGun account with!
      email: "vince@wasp-lang.dev" 
    },
  },
  dependencies: [
    ("@headlessui/react", "1.7.13"),
    ("@tailwindcss/forms", "^0.5.3"),
    ("@tailwindcss/typography", "^0.5.7"),
    ("react-hook-form", "7.43.1"),
    ("react-icons", "4.8.0"),
    ("request-ip", "3.3.0"),
    ("@types/request-ip", "0.0.37"),
    ("node-fetch", "3.3.0"),
    ("react-hook-form", "^7.45.4"),
    ("stripe", "11.15.0"),
    ("@faker-js/faker", "8.2.0"),
    ("@heroicons/react", "^2.0"),
    ("lodash", "4.17"),
    ("redux", "^4.0.5"),
    ("react-redux", "^7.1.3"),
    ("react-dropzone", "^14.2"),
    ("multer", "^1.4")
  ]
}

/* üíΩ Wasp defines DB entities via Prisma Database Models: 
 * https://wasp-lang.dev/docs/data-model/entities
 */

entity User {=psl
  id                        Int             @id @default(autoincrement())
  email                     String?         @unique
  password                  String?
  fullName                  String?
  isEmailVerified           Boolean         @default(false)
  emailVerificationSentAt   DateTime?
  passwordResetSentAt       DateTime?
  stripeId                  String? 
  checkoutSessionId         String?
  hasPaid                   Boolean         @default(false)
  sendEmail                 Boolean         @default(false)
  subscriptionStatus        String?
  datePaid                  DateTime?
  credits                   Int             @default(3)
  relatedObject             RelatedObject[]
  externalAuthAssociations  SocialLogin[]
  books                     Book[]          // Relationship to Book entity
  resources                 Resource[]      // Relationship to Resource entity

psl=}

entity SocialLogin {=psl
  id                        String          @id @default(uuid())
  provider                  String
  providerId                String
  user                      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    Int
  createdAt                 DateTime        @default(now())
  @@unique([provider, providerId, userId])
psl=}

// This can be anything. In most cases, this will be your product
entity RelatedObject {=psl
  id                        String          @id @default(uuid())
  content                   String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    Int
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
psl=}

entity Chapter {=psl
  id             Int      @id @default(autoincrement())
  number         Int      @default(1)
  title          String
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bookId         Int      // Foreign key to relate a chapter to a book if necessary
  book           Book     @relation(fields: [bookId], references: [id])  // Assuming you have a Book entity
psl=}

entity Book {=psl
  id            Int       @id @default(autoincrement())
  title         String
  author        String
  publishedDate DateTime?
  userId        Int       // Foreign key to relate a book to a user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to User entity
  chapters      Chapter[]  // Relationship to Chapter entity
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
psl=}

entity Resource {=psl
  id          Int      @id @default(autoincrement())
  title       String
  description String
  type        String
  userId      Int      // Foreign key to relate a resource to a user
  user User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to User entity
  url         String?   // Optional field to store the URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]    @relation("ResourceToTag") // Many-to-many relationship
psl=}

entity Tag {=psl
  id        Int       @id @default(autoincrement())
  name      String    @unique
  resources Resource[] @relation("ResourceToTag") // Many-to-many relationship
psl=}

/* üì° These are the Wasp Routes (You can protect them easily w/ 'authRequired: true');
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@client/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@client/auth/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@client/auth/PasswordReset",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@client/auth/EmailVerification",
}

route GptRoute { path: "/gpt", to: GptPage }
page GptPage {
  component: import GptPage from "@client/GptPage"
}

route PricingRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import Pricing from "@client/PricingPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@client/AccountPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@client/CheckoutPage"
}

/* ‚õë These are the Wasp Operations, which allow the client and server to interact:
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */

// üìù Actions aka Mutations

action generateGptResponse {
  fn: import { generateGptResponse } from "@server/actions.js",
  entities: [User, RelatedObject]
}

action stripePayment {
  fn: import { stripePayment } from "@server/actions.js",
  entities: [User]
}

// In your Wasp code

// Define the actions
action createBook {
  fn: import { createBook } from "@server/actions.js",
  entities: [User, Book]
}

action createChapter {
  fn: import { createChapter } from "@server/actions.js",
  entities: [User, Chapter]
}

action createUrlResource {
  fn: import { createUrlResource } from "@server/actions.js",
  entities: [User, Resource],
}

page ListBooksPage {
  component: import ListBooksPage from "@client/books/ListBooksPage",
  authRequired: true
}

route ListBooksPageRoute { path: "/books", to: ListBooksPage }

page CreateBookPage {
  component: import CreateBookPage from "@client/books/CreateBookPage",
  authRequired: false
}

route ListBooksPageRoute { path: "/books/create", to: CreateBookPage }

page ResearchPage {
  component: import ResearchPage from "@client/research/ResearchPage",
  authRequired: false
}

route ResearchPageRoute { path: "/research", to: ResearchPage }


// action stripeCreditsPayment {
//   fn: import { stripeCreditsPayment } from "@server/actions.js",
//   entities: [User]
// }

// action updateUser {
//   fn: import { updateUser } from "@server/actions.js",
//   entities: [User]
// }

// üìö Queries

query getRelatedObjects {
  fn: import { getRelatedObjects } from "@server/queries.js",
  entities: [User, RelatedObject]
}

query getBooks {
  fn: import { getBooks } from "@server/queries.js",
  entities: [User, Book]
}

query getResources {
  fn: import { getResources } from "@server/queries.js",
  entities: [User, Resource]
}
/*
 * üì° These are custom Wasp API Endpoints. Use them for callbacks, webhooks, etc.
 * https://wasp-lang.dev/docs/advanced/apis
 */ 

api stripeWebhook {
  fn: import { stripeWebhook } from "@server/webhooks.js",
  entities: [User],
  httpRoute: (POST, "/stripe-webhook")
}

/* üïµÔ∏è‚Äç‚ôÇÔ∏è These are the Wasp Cron Jobs. Use them to set up recurring tasks and/or queues:
 * https://wasp-lang.dev/docs/advanced/jobs
 */

job emailChecker {
  executor: PgBoss,
  perform: {
    fn: import { checkAndQueueEmails } from "@server/workers/checkAndQueueEmails.js"
  },
  schedule: {
    cron: "0 7 * * 1" // at 7:00 am every Monday
  },
  entities: [User]
}
